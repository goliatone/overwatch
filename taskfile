#!/bin/bash
PATH=./backend/node_modules/.bin:$PATH

PROJECT_NAME=goliatone/crime-visualization-backend
##########################################
# Development
##########################################

function dev:clean {
    [ -d "backend/node_modules" ] && rm -r backend/node_modules
    [ -d "frontend/node_modules" ] && rm -r frontend/node_modules
    [ -d "build" ] && rm -r build

    rm ./data/*.json
    rm ./backend/*.log

    rm -rf ./dist
    rm -rf ./frontend/build
    rm -rf ./backend/modules/server/public/build
    rm -rf ./backend/data/pages/*.md
}

function dev:install {
    pushd backend
    npm i 
    popd
    pushd frontend
    npm i 

    data:pages

    data:json
}

function data:pages {
    ln -s ./README.md ./backend/data/pages/ABOUT.md
}

function data:json {
    # TODO use json2csv
    # csv2json ./data/sacramento.01.2006.csv ./data/crime_data.json
    SRC="./data/sources/crime_data.json"
    mkdir -p ./data/sources
    csv2json ./data/SacramentocrimeJanuary2006.csv "${SRC}"
    ./backend/bin/format-data --data "${SRC}" > ./backend/data/crimesdb.json
}

function dev:test {
    pushd backend
    npm run test
    popd
} 

# Bundle and move frontend assets to server 
function dev:frontend {
    pushd ./frontend
    npm run build
    popd

    # Clean old assets
    rm -f ./backend/modules/server/public/bundle.*
    rm -f ./backend/modules/server/public/global.*.css

    # Copy new assets
    cp -r ./frontend/build/* ./backend/modules/server/public/

    # Update view with new hashes..,
    mv ./backend/modules/server/public/index.html ./backend/modules/server/views/index.ejs
}

function dev:docker {
    docker build --tag "$PROJECT_NAME" .
}

function dev:run {
    docker run -it --rm --env-file ./backend/.envset -p 4981:1981 -p 9090:9090 "$PROJECT_NAME"
}

##########################################
# Create certs for https://localhost
# Needed for some features like service-workers. 
# keychain is macOS specific.
# @see: https://letsencrypt.org/docs/certificates-for-localhost/
##########################################

function dev:certs:create {
    local crt="./ops/certs/crimeviz-localhost.crt"
    local key="./ops/certs/crimeviz-localhost.key"

    openssl req -x509 -out "$crt" -keyout "$key" \
        -newkey rsa:2048 -nodes -sha256 \
        -subj '/CN=localhost' -extensions EXT -config <( \
    printf "[dn]\nCN=localhost\n[req]\ndistinguished_name = dn\n[EXT]\nsubjectAltName=DNS:localhost\nkeyUsage=digitalSignature\nextendedKeyUsage=serverAuth")
}

function dev:certs:keychain {
    local crt="./ops/certs/crimeviz-localhost.crt"
    sudo security add-trusted-cert -d -r trustRoot -k "/Library/Keychains/System.keychain" "$crt"
}

##########################################
# Release build
##########################################

function release:zip {
    #Only update files, if we made some changes
    if output=$(git status --untracked-files=no --porcelain) && [ -z "$output" ]; then
        echo "Bundling project zip..."
        mkdir -p ./dist
        git archive --format=zip HEAD -o ./dist/visualization_project.zip
    elif [[ $* == *--force* ]]
    then 
        echo "You known what you are doing?"
        echo "Changes of files not commited will not be in final bundle..."
        mkdir -p ./dist
        git archive --format=zip HEAD -o ./dist/visualization_project.zip
    else
        red=`tput setaf 1`
        reset=`tput sgr0`
        echo "  ${red}Git working directory not clean."
        echo "  Commit your changes and try again."
        echo "  If you know what you are doing, use --force${reset}"
        exit 1
    fi
}

function release:tag {
    pushd ./backend || echo "faild pushd"
    BVERSION=$(npm version patch)
    popd

    pushd ./frontend || echo "faild pushd"
    FVERSION=$(npm version patch)
    popd

    git add ./backend/package.json
    git add ./frontend/package.json
    git ci "Bump package version ${BVERSION}"

    git tag -a "$BVERSION" -m "Tag version $BVERSION"
    git push origin --tags

    echo $BVERSION
}

function release:docker {

    TAG=${1:-$(git describe --abbrev=0 --tags)}
    if [ -z "${TAG}" ]; then
        TAG=latest
    fi

    docker build --no-cache --tag "$PROJECT_NAME:$TAG" .
}

function release:run {

    TAG=${1:-$(git describe --abbrev=0 --tags)}
    if [ -z "${TAG}" ]; then
        TAG=latest
    fi

    echo "running $PROJECT_NAME:$TAG"

    docker run -it --rm --env-file ./backend/.envset -p 1981:1981 -p 9090:9090 -d "$PROJECT_NAME:$TAG"
    
    green=`tput setaf 2`
    reset=`tput sgr0`
    echo "  ${green}The application should open in the browser."
    echo "  ${green}If not click this link:"
    echo "  ${green}http://localhost:1981/about${reset}"
    sleep 2s
    open http://localhost:1981/about
}

function help {
    echo "$0 <task> <args>"
    echo "Tasks:"
    compgen -A function | grep -v '^_' | cat -n
}

TIMEFORMAT="Task completed in %3lR"
time ${@:-help}  