{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../List.svelte",
    "../../Map.svelte"
  ],
  "sourcesContent": [
    "<script>\n  \timport Map from './components/Map.svelte';\n  \timport List from './components/List.svelte';\n</script>\n\n<style>\n  .container {\n    height: 100vh;\n    display: flex;\n  }\n\n  .pane {\n    display: flex;\n    flex-direction: column;\n    max-height: 100vh;\n  }\n\n  .left {\n    align-items: center;\n    width: 30%;\n    justify-content: center;\n  }\n\n  .right {\n    justify-content: space-between;\n    width: 70%;\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"pane left\">\n    <List />\n  </div>\n  <div class=\"pane right\">\n    <Map />\n  </div>\n</div>\n",
    "<script>\n    import inView from 'in-view';\n    import { onMount, onDestroy } from 'svelte';\n    import { fly } from 'svelte/transition';\n        \n    import incidents, {incidentItems} from '../stores/incidents';\n    import { activeListItem, activeMapItem } from '../stores.js';\n    import { activeCity } from '../consts.js';\n\n    // Define the ref\n    let listRef;\n\n    /**\n     * @see https://codeburst.io/throttling-and-debouncing-in-javascript-b01cad5c8edf\n     */ \n    function debounce(callback, wait=500) {\n        let timeout;\n        return (...args) => {\n            const context = this;\n            clearTimeout(timeout);\n            timeout = setTimeout(_ => callback.apply(context, args), wait);\n        };\n    }\n\n    function initialize() {\n        // Set a nicer offset so it's not a hard cutoff\n        inView.offset(110);\n\n        listRef.addEventListener('scroll', debounce(_=> {\n            // Active list item is top-most fully-visible item\n           const visibleListItems = Array.from(\n                document.getElementsByClassName('list-item')\n            ).map(inView.is);\n\n            // If it's a new one, update active list item\n            const topMostVisible = visibleListItems.indexOf(true);\n            if (topMostVisible !== $activeMapItem) {\n                activeMapItem.set(topMostVisible);\n            }\n        }, 500));\n    }\n\n    function setActiveMapItem(index) {\n        activeMapItem.set(index);\n    }\n\n    // Update list scroll position when active list item is updated via map\n    const unsubscribeActiveListItem = activeListItem.subscribe(newActiveListItem => {\n        if (listRef) {\n            const activeItem  =document.getElementById(\n                `list-item-${newActiveListItem}`\n            );\n\n            listRef.scrollTop = activeItem.offsetTop;\n        }\n    });\n\n    let page = 1;\n\n    function goNext() {\n        page++;\n\t\tincidents.listItems(activeCity.name, {page, size:200});\n    }\n\n    function goPrev(){\n        page--;\n\t\tincidents.listItems(activeCity.name, {page, size:200});\n    }\n\n    /**\n     * Livecycle handler, register map on first\n     * render.\n     */ \n    onMount(initialize);\n\n    /**\n     * Remove listener on unmount\n     */ \n    onDestroy(unsubscribeActiveListItem);\n\n    let visible = false;\n\n    $: visible = $incidentItems && $incidentItems.length;\n</script>\n\n<style>\n    #list-items {\n        display: flex;\n        flex-wrap: wrap;\n        overflow: scroll;\n    }\n\n    .list-item {\n        font-family: Helvetica, Arial, sans-serif;\n        font-size: 1.2em;\n        line-height: 1.5em;\n        width: 100%;\n        margin: 0px 40px 0px 40px;\n        border-bottom: #ccc solid 1px;\n    }\n\n    .list-item.active { \n        background-color: #ff3377;\n    }\n\n    .head {\n        position: -webkit-sticky;\n        position: sticky;\n        top: 0;\n        background:#fff;\n        width: 100%;\n        align-self: flex-start;\n    }\n    .title {\n        margin: 30px 40px;\n    }\n\n    .loader {\n        margin: 30px 40px;\n    }\n\n    .tail {\n        margin: 20px 40px;\n        padding-bottom: 40px;\n    }\n\n    .pagination {\n        /* position: absolute; */\n        position: -webkit-sticky;\n        position: sticky; \n        bottom: 0px;\n        height: 40px;\n        width:100%;\n        background-color:#232332;\n        padding: 20px 40px;\n    }\n\n    h5 {\n        font-family: Helvetica, Arial, sans-serif;\n        text-transform: capitalize;\n    }\n</style>\n\n<div id=\"list-items\" bind:this=\"{listRef}\">\n  \n  <div class=\"head\">\n    <div class=\"title\">\n        <h2>Overwatch: Sacramento</h2>\n    </div>\n  </div>\n\n{#if $incidentItems && $incidentItems.length}\n  {#each $incidentItems as listItem, index}\n    <div on:click={_=>setActiveMapItem(index)} class=\"list-item {$activeMapItem === index ? 'active': ''}\" id=\"list-item-{index}\">      \n        <span>{listItem.date}: {listItem.address}</span>\n      {@html listItem.description}\n    </div>\n  {/each}\n{:else}\n    <div class=\"loader\">Loading...</div>\n{/if}\n\n  <div class=\"tail\">\n    <i>\n      This was made as part of a <a href=\"https://svelte.dev/\">Svelte</a>\n      tutorial on <a href=\"https://dev.to/bryce/an-interactive-scrolling-map-list-in-svelte-34c3\">dev.to</a>.\n      View source on <a href=\"https://gitlab.com/brycedorn/svelte-reactive-map-list\">GitLab</a>.\n    </i>\n  </div>\n\n{#if visible}\n  <div class=\"pagination\" transition:fly=\"{{ y: 40, duration: 600 }}\">\n    <button on:click={goPrev}>Prev</button>\n    <button on:click={goNext}>Next</button>\n  </div>\n{/if}\n\n</div>\n",
    "<svelte:head>\n    <link href=\"https://api.tiles.mapbox.com/mapbox-gl-js/v1.9.1/mapbox-gl.css\" rel=\"stylesheet\" />\n</svelte:head>\n<script>\n    import mapboxgl from 'mapbox-gl/dist/mapbox-gl.js';\n    import { onMount, onDestroy } from 'svelte';\n\n    import { activeListItem, activeMapItem } from '../stores.js';\n    import incidents, {incidentItems} from '../stores/incidents';\n    import { accessToken, activeCity } from '../consts.js';\n\n    let map;\n\n    /**\n     * For each list item we generate an object with props for \n     * the given feature. Here we store metadata for each item\n     * so we can access it later when we interact with list items\n     * e.g. on click\n     */ \n    function generateFeature({ address, description, coordinates }, index) {\n        return {\n            type: 'Feature',\n            properties: {\n                description: `<b>${address}</b><br/>${description}`,\n                id: index\n            },\n            geometry: {\n                type: 'Point',\n                coordinates\n            }\n        };\n    }\n\n    /**\n     * Update current data source. \n     * This will render all new features\n     */ \n    function updateDataSource(features=[]) {\n        if(!map.loaded()){\n            return setTimeout(_ => {\n                updateDataSource(features);\n            }, 100);\n        }\n        map.getSource('places.source').setData({\n            type: 'FeatureCollection',\n            features: features.map(generateFeature)\n        });\n\n        /**\n             * Animate map on first render\n             */ \n            map.flyTo({ \n                center: features[0].coordinates,\n                essential: true,\n                curve: 1,\n                speed: 0.2,\n                // zoom: 9,\n                // pitch: 0\n            });\n    }\n    window.updateDataSource = updateDataSource;\n\n    function initializeMap() {\n        mapboxgl.accessToken = accessToken;\n\n        let options = {\n            city: 'sacramento',\n            center: [\n                -121.478851, \n                38.575764\n            ],\n        };\n\n\n        /**\n         * dark-v10\n         * light-v10\n         */\n        const mapOptions =  {\n            container: 'map',\n            style: 'mapbox://styles/mapbox/dark-v10?optimize=true',\n            center: activeCity.center,\n            zoom: 15,\n            pitch: 60, // pitch in degrees\n            bearing: 0, // bearing in degrees\n        };\n    \n        map = new mapboxgl.Map(mapOptions);\n        const nav = new mapboxgl.NavigationControl();\n        \n        map.addControl(nav, 'top-right');\n\n        map.on('load', async _ => {\n\n            /**\n             * Add source \n             */ \n            map.addSource('places.source', {\n                type: 'geojson',\n                data: {\n                    type: 'FeatureCollection',\n                    features: []\n                }\n            });\n\n            map.addLayer({\n                id: 'places',\n                type: 'symbol',\n                source: 'places.source',\n                layout: {\n                    'icon-image': 'police-11',\n                    'icon-size': 2,\n                    'icon-allow-overlap': true\n                }\n            });\n\n            /**\n             * Manage Popup on click\n             */ \n            map.on('click', 'places', function({ features }) {\n                const match = features[0];\n                const coordinates = match.geometry.coordinates.slice();\n        \n                // Show popup\n                new mapboxgl.Popup()\n                    .setLngLat(coordinates)\n                    .setHTML(match.properties.description)\n                    .addTo(map);\n\n                // Set new active list item\n                activeListItem.set(match.properties.id);\n            });\n\n            /**\n             * Feature should show pointer on hover\n             */\n            map.on('mouseenter', 'places', _=> {\n                map.getCanvas().style.cursor = 'pointer';\n            });\n\n            /**\n             * Remove cursor\n             */\n            map.on('mouseleave', 'places', _=> {\n                map.getCanvas().style.cursor = '';\n            });\n\n\n            await incidents.listItems('sacramento', {page:1, size:200});\n\n            // /**\n            //  * Animate map on first render\n            //  */ \n            // map.flyTo({ \n            //     center: options.flyTo,\n            //     essential: true,\n            //     curve: 1,\n            //     speed: 0.2,\n            //     // zoom: 9,\n            //     // pitch: 0\n            // });\n        });\n    }\n\n    /**\n     * Use reactivity to update map center when active \n     * item is updated via list, we update using store.\n     */\n    const unsubscribeActiveMapItem = activeMapItem.subscribe(newActiveMapItem => {\n        if (map) {\n            map.flyTo({ \n                center: $incidentItems[newActiveMapItem].coordinates,\n                essential: true,\n                curve: 1,\n                speed: 0.2,\n                // zoom: 9,\n                // pitch: 0\n            });\n        }\n    });\n\n    /**\n     * Livecycle handler, register map on first\n     * render.\n     */ \n    onMount(initializeMap);\n\n    /**\n     * Remove listener on unmount\n     */ \n    onDestroy(unsubscribeActiveMapItem);\n\n    $: {\n        if($incidentItems.length) {\n            console.log('update data source...');\n            updateDataSource($incidentItems);\n        }\n    };\n</script>\n\n<style>\n    #map {\n        width: 100%;\n        height: 100%;\n        background-color: #393838;\n    }\n\n    #map:before {\n        box-shadow: 20px 0 10px -10px rgba(0, 0, 0, 0.15) inset;\n        content: '';\n        height: 100%;\n        left: 0;\n        position: absolute;\n        width: 20px;\n        z-index: 1000;\n    }\n</style>\n\n<div id=\"map\"></div>\n"
  ],
  "names": [],
  "mappings": "AAME,UAAU,eAAC,CAAC,AACV,MAAM,CAAE,KAAK,CACb,OAAO,CAAE,IAAI,AACf,CAAC,AAED,KAAK,eAAC,CAAC,AACL,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,UAAU,CAAE,KAAK,AACnB,CAAC,AAED,KAAK,eAAC,CAAC,AACL,WAAW,CAAE,MAAM,CACnB,KAAK,CAAE,GAAG,CACV,eAAe,CAAE,MAAM,AACzB,CAAC,AAED,MAAM,eAAC,CAAC,AACN,eAAe,CAAE,aAAa,CAC9B,KAAK,CAAE,GAAG,AACZ,CAAC;AC4DC,WAAW,eAAC,CAAC,AACT,OAAO,CAAE,IAAI,CACb,SAAS,CAAE,IAAI,CACf,QAAQ,CAAE,MAAM,AACpB,CAAC,AAED,UAAU,eAAC,CAAC,AACR,WAAW,CAAE,SAAS,CAAC,CAAC,KAAK,CAAC,CAAC,UAAU,CACzC,SAAS,CAAE,KAAK,CAChB,WAAW,CAAE,KAAK,CAClB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CACzB,aAAa,CAAE,IAAI,CAAC,KAAK,CAAC,GAAG,AACjC,CAAC,AAED,UAAU,OAAO,eAAC,CAAC,AACf,gBAAgB,CAAE,OAAO,AAC7B,CAAC,AAED,KAAK,eAAC,CAAC,AACH,QAAQ,CAAE,cAAc,CACxB,QAAQ,CAAE,MAAM,CAChB,GAAG,CAAE,CAAC,CACN,WAAW,IAAI,CACf,KAAK,CAAE,IAAI,CACX,UAAU,CAAE,UAAU,AAC1B,CAAC,AACD,MAAM,eAAC,CAAC,AACJ,MAAM,CAAE,IAAI,CAAC,IAAI,AACrB,CAAC,AAED,OAAO,eAAC,CAAC,AACL,MAAM,CAAE,IAAI,CAAC,IAAI,AACrB,CAAC,AAED,KAAK,eAAC,CAAC,AACH,MAAM,CAAE,IAAI,CAAC,IAAI,CACjB,cAAc,CAAE,IAAI,AACxB,CAAC,AAED,WAAW,eAAC,CAAC,AAET,QAAQ,CAAE,cAAc,CACxB,QAAQ,CAAE,MAAM,CAChB,MAAM,CAAE,GAAG,CACX,MAAM,CAAE,IAAI,CACZ,MAAM,IAAI,CACV,iBAAiB,OAAO,CACxB,OAAO,CAAE,IAAI,CAAC,IAAI,AACtB,CAAC;ACkED,IAAI,eAAC,CAAC,AACF,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,gBAAgB,CAAE,OAAO,AAC7B,CAAC,AAED,mBAAI,OAAO,AAAC,CAAC,AACT,UAAU,CAAE,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,CACvD,OAAO,CAAE,EAAE,CACX,MAAM,CAAE,IAAI,CACZ,IAAI,CAAE,CAAC,CACP,QAAQ,CAAE,QAAQ,CAClB,KAAK,CAAE,IAAI,CACX,OAAO,CAAE,IAAI,AACjB,CAAC"
}